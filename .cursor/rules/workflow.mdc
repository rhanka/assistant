---
description: Standard repository workflow (boot/feature/maintenance/release)
alwaysApply: true
tags: [workflow, repository, guardrails]
---

# WORKFLOW

## Principles
- **FIRST**: Read `.cursor/rules/MASTER.mdc` for consolidated rules overview
- **SECOND**: Read `README.md` for project overview and setup
- **THIRD**: Read `TODO.md` for current priorities and items
- **FOURTH**: Read `RELEASE.md` for target version and scope
- Propose a short action plan before coding. Request human approval when "⚠ approval".
- apply `conventions.mdc` for coding practice and `testing.mdc` for testing practice
- be conform to `architecture.mdc` architecture directives

## BOOT (first run)
1. Open `TODO.md` and focus on **Now** items.
2. For each **Now** item, create a branch `boot/<slug>`.
3. Generate missing skeleton files or services.
4. Open a PR with a checklist. Wait for approval.

## FEATURE
1. Read the target `TODO.md` item (**Next** or **Now**).
2. **Create feature branch** with `BRANCH.md` documenting plan and tasks.
3. Post a 3–6 step plan as the first PR comment.
4. Implement with guardrails (preview, dry-run, logs).
5. **Test before commit** - ensure all changes work as expected.
6. Update `TODO.md` (check item, reference PR) and `RELEASE.md` (scope).

## MAINTENANCE
- Small chores/refactors/docs. Same flow as FEATURE.

## RELEASE
1. Collect merged PRs since last tag (Conventional Commits).
2. Update `RELEASE.md` (notes, risks, rollback).
3. Open `release/x.y.z` PR with release checklist.
4. Tag + publish after human approval.

## Guardrails
- Never perform destructive DB/system actions without "⚠ approval".
- For Playwright/Cursor, always **simulate** before executing a critical action.
- **Always test before commit** - no exceptions to this rule.
- **Use Make for testing** - always run `make test.unit` before commit (see `testing.mdc`)

## Development Conventions
- **Commits**: Conventional Commits (feat:, fix:, chore:, refactor:, docs:, test:)
- **Branches**: `feat/<slug>`, `fix/<slug>`, `boot/<slug>`, `release/x.y.z`. Open only one at once
- **PR**: one capability per PR; checklist; clear description (objective + short plan)
- **Never proceed more than one item of `TODO.md`**
- **Be minimalist in changes** (don't refacto the whole to avoid regressions)
- **Commit messages and PR descriptions MUST be in English**

## Commit Guidelines
- **Atomic commits** : One logical change per commit
- **File count limit** : Maximum 10-15 files per commit
- **Commit frequency** : Commit every 2-3 logical changes
- **Before major work** : Commit current progress
- **Commit message format** : `type: concise description`

### Commit Workflow (MANDATORY)
1. **Check status first** : Always run `git status` before committing
2. **Selective staging** : Use `git add <specific-files>` for files you know you modified
3. **Remove deleted files** : Use `git rm <deleted-files>` for files you know you deleted
4. **Verify staging** : Run `git status` again to confirm what's staged
5. **ABSOLUTELY NO git add .** : Never use `git add .` - always stage files individually
6. **Commit with context** : Include clear description of what changed and why
7. **ONE task per commit** : Complete ONE logical task, then commit. Do NOT chain multiple tasks without committing.
8. **Consolidate CI debug commits (MANDATORY)**: When experimenting with CI workflows (e.g., tweaking `.github/workflows/*.yml`), avoid piling multiple temporary `fix:`/`test:` commits.
   - Small last-commit adjustments: prefer `git commit --amend --no-edit` (or edit message as needed).
   - Multiple debug commits: use `git reset --soft HEAD~N`, stage intentionally with `git add <files>`, and create ONE clean commit.
   - After amending or soft reset (history rewrite), you MUST push with `git push --force-with-lease` to update the remote safely.
   This keeps the history readable and compliant with atomic commit rules.

### Next Step Proposal (MANDATORY)
After completing any task, **ALWAYS propose the next step** by following the workflow:
1. **Check current status** : What was just completed
2. **Identify next priority** : What comes next according to TODO.md or current context
3. **Propose specific action** : Clear, actionable next step
4. **Wait for approval** : Do not proceed without user confirmation

### CI Monitoring (MANDATORY)
- After any push to a feature branch or PR update, automatically verify GitHub Actions runs.
- Preferred: use GitHub API via curl (gh CLI optional). Minimal, non-interactive checks:
  - Latest run for current branch:
    - `curl -s "https://api.github.com/repos/<ORG>/<REPO>/actions/runs?branch=$BRANCH&per_page=1" | grep -E '"event"|"status"|"conclusion"'`
  - Job list for a specific run id:
    - `curl -s "https://api.github.com/repos/<ORG>/<REPO>/actions/runs/<RUN_ID>/jobs" | grep -E '"name"|"conclusion"'`
- If status is "skipped" unexpectedly, inspect workflow conditions/filters; for path-based workflows, ensure common files (Makefile, docker-compose.yml, packages/config, packages/schemas, CI files) are included in filters.
- If quick tweaks are needed, prefer `git commit --amend --no-edit` and push with `git push --force-with-lease`.
- If multiple debug commits were created, consolidate with `git reset --soft HEAD~N`, commit once, then `git push --force-with-lease`.

## Quality Gates
- **Before commit**: Run `make test.unit` (enforced by testing.mdc)
- **Before PR**: Run `make check` to validate consistency
- **CI/CD**: All tests must pass, guides must be consistent
- **Architecture**: Verify `make` commands work before any changes

## Feature Branch Management

### Branch Documentation
- **REQUIRED**: Create `BRANCH.md` for each feature branch
- **LOCATION**: Root of feature branch (not committed to main)
- **PURPOSE**: Track progress, plan, and commit mapping

### BRANCH.md Structure
```markdown
# Feature: [Name]

## Objective
Brief description of what this feature accomplishes

## Plan / Todo
- [ ] Task 1: Description
- [ ] Task 2: Description  
- [ ] Task 3: Description

## Commits & Progress
- [x] **Commit 1** (hash): Task 1 completed
- [x] **Commit 2** (hash): Task 2 completed
- [ ] **Commit 3**: Task 3 in progress

## Status
- **Progress**: X/Y tasks completed
- **Current**: Working on Task 3
- **Next**: Complete Task 3, then Task 4
```

### Branch Workflow
1. **Create branch** → Create `BRANCH.md` with plan
2. **Before commit** → Update `BRANCH.md` with new task
3. **After commit** → Link commit hash to completed task
4. **Before merge** → Ensure all tasks are completed and documented
5. **After merge** → Archive `BRANCH.md` or move to docs/

### Quality Gates
- **Branch creation**: `BRANCH.md` must exist before first commit
- **Commit mapping**: Every commit must be linked to a task
- **Progress tracking**: Status must be updated after each commit
- **Merge readiness**: All tasks must be completed and documented

### Branch Documentation in Commits
- **Intermediate commits**: Include and update `BRANCH.md` in each commit
- **Final commit**: Copy `BRANCH.md` content to commit message, then remove file
- **Commit message format**: Include complete development history and commit mapping
- **New branch**: Start with fresh `BRANCH.md` for next feature

### Final Commit Workflow
1. **Copy BRANCH.md content** to commit message
2. **Remove BRANCH.md** from working directory
3. **Commit** with complete development history
4. **Merge** branch with full traceability

## Guide Maintenance
**IMPORTANT**: When updating documentation, follow this hierarchy:

### Update Order (MANDATORY)
1. **`.mdc` files FIRST** - Update rules when constraints change
2. **Documentation SECOND** - Update `.md` files to match rules
3. **Implementation THIRD** - Update code to follow rules

### Consistency Validation
- **Before commit**: Run `make check` to validate consistency
- **CI/CD**: GitHub Actions validates guide consistency automatically
- **Manual check**: Use `make scripts.validate-guides` for specific validation

### File Responsibilities
- **`.mdc` files**: Define rules and constraints (AI source of truth)
- **`.md` files**: Explain how to follow rules (user guides)
- **Both must be consistent** - no contradictions allowed

## Maintenance Workflow

### When Rules Change
1. **Update `.mdc` file FIRST** - Update rules when constraints change
2. **Update documentation SECOND** - Update `.md` files to match rules
3. **Verify consistency** - Run `make check` to validate

### When Documentation Improves
1. **Check if it's a rule change**
   - If YES → Update `.mdc` file FIRST, then documentation
   - If NO → Update documentation only
2. **Verify rule compliance** - All documentation must reflect current `.mdc` rules

### Validation Commands
- **Automatic**: `make check` (i18n + guide validation)
- **Individual**: `make scripts.i18n`, `make scripts.validate-guides`
- **Manual**: `./scripts/validate_guides.sh`
