---
description: Architecture directives
alwaysApply: true
tags: [architecture, boundaries]
---

# ARCHITECTURE
- UI : SvelteKit (`packages/ui`) — bilingual EN/FR with `/en` and `/fr`.
- API : NestJS GraphQL + REST/OpenAPI (`packages/api`) with Prisma + PostgreSQL.
- Scheduler : Plan→DAG compilation, priorities/budgets/scopes (`packages/scheduler`).
- Workers : BullMQ (Redis) for GitHub, Cursor/Playwright, sync (`packages/workers`).
- AI : FastAPI Python (`packages/ai`) — called over HTTP by API/Workers.
- Scripts : `packages/scripts` (DB/migrations/recoveries, i18n checks, release).
- Data : PostgreSQL (dev/prod), Redis (job queue).
- Security : human approval on ⚠ actions; full journaling; dry-run by default.
- CI/CD: use Make for all local CI/CD directives and Github Action for automation
- Dev environnement: docker compose
- Prod environement: Kubernetes (bare yaml configuration, NO Helm)
- Target Cloud: Scaleway (Kubernetes)

## Docker-First Architecture (MANDATORY)
- **NO native npm/python on developer machine** - Docker containers only
- **ALL development commands MUST go through Docker** - no exceptions
- **Dependencies managed in containers** - never install npm/python globally
- **Make commands execute in Docker** - consistent environment across all developers
- **Clean workspace** - no node_modules, no .venv, no global packages

## Configuration Management
- **Build/Compilation configs** → `packages/config/` (Docker-first approach)
  - TypeScript compilation settings
  - Build tool configurations
  - Docker base configurations
- **Editor/IDE configs** → **Root** (for VSCode/Cursor AI)
  - .editorconfig, .eslintrc.js, .prettierrc
  - .vscode/settings.json, .cursorrules
- **Separation of concerns**: Build configs in packages, editor configs in root

## UI Framework (SvelteKit)
- Routing with language prefix: `/[lang=en|fr]`
- Use `svelte-i18n`; no hard-coded UI strings
- Minimal state; prefer local stores
- Tests: basic smoke via Playwright on `/en` and `/fr`

## Language Policy
- All code, comments, commit messages, PR titles/descriptions, API schemas and server errors MUST be in **English**
- All Markdown and MDC files MUST be in **English**
- The UI MUST support **English and French** locales (`/en`, `/fr`) with `en` as fallback
- Any UI copy change MUST update both `en/*.json` and `fr/*.json` and keep keys stable
