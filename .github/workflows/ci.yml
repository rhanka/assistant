name: CI

on:
  push:
    branches-ignore: [main]
  pull_request:
    branches: [main]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      global: ${{ steps.filter.outputs.global }}
      api: ${{ steps.filter.outputs.api }}
      scheduler: ${{ steps.filter.outputs.scheduler }}
      workers: ${{ steps.filter.outputs.workers }}
      ui: ${{ steps.filter.outputs.ui }}
      ai: ${{ steps.filter.outputs.ai }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            global:
              - 'Makefile'
              - 'docker-compose.yml'
              - 'packages/config/**'
              - 'packages/schemas/**'
              - '.github/workflows/ci.yml'
            api:
              - 'packages/api/**'
              - 'packages/schemas/**'
            scheduler:
              - 'packages/scheduler/**'
            workers:
              - 'packages/workers/**'
            ui:
              - 'packages/ui/**'
            ai:
              - 'packages/ai/**'
  # Build API Docker image
  build-api:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Build API image
        run: make build.api
      - name: Save API image as artifact
        run: make save.api
      - name: Upload API image artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-image
          path: api-image.tar

  # Build Scheduler Docker image
  build-scheduler:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Build Scheduler image
        run: make build.scheduler
      - name: Save Scheduler image as artifact
        run: make save.scheduler
      - name: Upload Scheduler image artifact
        uses: actions/upload-artifact@v4
        with:
          name: scheduler-image
          path: scheduler-image.tar

  # Build Workers Docker image
  build-workers:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.workers == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Build Workers image
        run: make build.workers
      - name: Save Workers image as artifact
        run: make save.workers
      - name: Upload Workers image artifact
        uses: actions/upload-artifact@v4
        with:
          name: workers-image
          path: workers-image.tar

  # Build UI Docker image
  build-ui:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.ui == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Build UI image
        run: make build.ui
      - name: Save UI image as artifact
        run: make save.ui
      - name: Upload UI image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-image
          path: ui-image.tar

  # Build AI Docker image
  build-ai:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.ai == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Build AI image
        run: make build.ai
      - name: Save AI image as artifact
        run: make save.ai
      - name: Upload AI image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-image
          path: ai-image.tar

  # Tests unitaires (conditionnels selon les fichiers modifiés)
  test-api-unit:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.api
      - name: Test API Unit
        run: make test.unit.api

  test-scheduler-unit:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.scheduler
      - name: Test Scheduler Unit
        run: make test.unit.scheduler

  test-workers-unit:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.workers == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.workers
      - name: Test Workers Unit
        run: make test.unit.workers

  test-ui-unit:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.ui == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.ui
      - name: Test UI Unit
        run: make test.unit.ui

  test-ai-unit:
    runs-on: ubuntu-latest
    needs: [changes, build-ai]
    if: needs.changes.outputs.ai == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download AI image artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-image
          path: .
      - name: Load AI image from artifact
        run: make load.ai
      - name: Start services
        run: make up.ai
      - name: Test AI Unit
        run: make test.unit.ai

  # Tests d'intégration P2P (dépendent des tests unitaires)
  test-scheduler-api:
    runs-on: ubuntu-latest
    needs: [changes, test-scheduler-unit, test-api-unit]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.scheduler up.api
      - name: Test Scheduler-API Integration
        run: make test.integration.scheduler-api

  test-scheduler-workers:
    runs-on: ubuntu-latest
    needs: [changes, test-scheduler-unit, test-workers-unit, test-api-unit]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.workers == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.scheduler up.workers up.api
      - name: Test Scheduler-Workers Integration
        run: make test.integration.scheduler-workers-api

  test-workers-api:
    runs-on: ubuntu-latest
    needs: [changes, test-workers-unit, test-api-unit]
    if: needs.changes.outputs.workers == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.workers up.api
      - name: Test Workers-API Integration
        run: make test.integration.workers-api

  test-ui-api:
    runs-on: ubuntu-latest
    needs: [changes, test-ui-unit, test-api-unit]
    if: needs.changes.outputs.ui == 'true' || needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Start services
        run: make up.ui up.api
      - name: Test UI-API E2E
        run: make test.e2e.ui-api

  # Tests P2P avec AI
  test-scheduler-ai:
    runs-on: ubuntu-latest
    needs: [changes, test-scheduler-unit, build-ai, test-ai-unit]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.ai == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download AI image artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-image
          path: .
      - name: Load AI image from artifact
        run: make load.ai
      - name: Start services
        run: make up.scheduler up.ai
      - name: Test Scheduler-AI Integration
        run: make test.integration.scheduler-ai

  test-workers-ai:
    runs-on: ubuntu-latest
    needs: [changes, test-workers-unit, build-ai, test-ai-unit]
    if: needs.changes.outputs.workers == 'true' || needs.changes.outputs.ai == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download AI image artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-image
          path: .
      - name: Load AI image from artifact
        run: make load.ai
      - name: Start services
        run: make up.workers up.ai
      - name: Test Workers-AI Integration
        run: make test.integration.workers-ai

  # Code-based security scans per service (SAST + SCA) - can run in parallel
  security-code-api:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: make install.security.tools
      - name: SAST (code)
        run: make test.security.sast-api
      - name: SCA (deps)
        run: make test.security.sca-api

  # Container-based security scans per service - depends on build
  security-container-api:
    runs-on: ubuntu-latest
    needs: [changes, build-api]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download API image artifact
        uses: actions/download-artifact@v4
        with:
          name: api-image
          path: .
      - name: Load API image from artifact
        run: make load.api
      - name: Container scan
        run: make test.security.container-api

  # Code-based security scans per service (SAST + SCA) - can run in parallel
  security-code-scheduler:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: make install.security.tools
      - name: SAST (code)
        run: make test.security.sast-scheduler
      - name: SCA (deps)
        run: make test.security.sca-scheduler

  # Container-based security scans per service - depends on build
  security-container-scheduler:
    runs-on: ubuntu-latest
    needs: [changes, build-scheduler]
    if: needs.changes.outputs.scheduler == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download Scheduler image artifact
        uses: actions/download-artifact@v4
        with:
          name: scheduler-image
          path: .
      - name: Load Scheduler image from artifact
        run: make load.scheduler
      - name: Container scan
        run: make test.security.container-scheduler

  # Code-based security scans per service (SAST + SCA) - can run in parallel
  security-code-workers:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.workers == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: make install.security.tools
      - name: SAST (code)
        run: make test.security.sast-workers
      - name: SCA (deps)
        run: make test.security.sca-workers

  # Container-based security scans per service - depends on build
  security-container-workers:
    runs-on: ubuntu-latest
    needs: [changes, build-workers]
    if: needs.changes.outputs.workers == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download Workers image artifact
        uses: actions/download-artifact@v4
        with:
          name: workers-image
          path: .
      - name: Load Workers image from artifact
        run: make load.workers
      - name: Container scan
        run: make test.security.container-workers

  # Code-based security scans per service (SAST + SCA) - can run in parallel
  security-code-ui:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.ui == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: make install.security.tools
      - name: SAST (code)
        run: make test.security.sast-ui
      - name: SCA (deps)
        run: make test.security.sca-ui

  # Container-based security scans per service - depends on build
  security-container-ui:
    runs-on: ubuntu-latest
    needs: [changes, build-ui]
    if: needs.changes.outputs.ui == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download UI image artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-image
          path: .
      - name: Load UI image from artifact
        run: make load.ui
      - name: Container scan
        run: make test.security.container-ui

  # Unified security scans for AI service (SAST + SCA + IaC + Container) - depends on build
  security-ai:
    runs-on: ubuntu-latest
    needs: [changes, build-ai]
    if: needs.changes.outputs.ai == 'true' || needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Download AI image artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-image
          path: .
      - name: Load AI image from artifact
        run: make load.ai
      - name: SAST (code)
        run: make test.security.sast-ai
      - name: SCA (deps)
        run: make test.security.sca-ai
      - name: Container scan
        run: make test.security.container-ai

  # Global IaC security scan (code-based, can run in parallel)
  security-iac:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.global == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: make install.security.tools
      - name: IaC scan
        run: make test.security.iac-infra